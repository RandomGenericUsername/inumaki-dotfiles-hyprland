#!/bin/bash

: '
     __ __     ____           __        ____               __ __
  __/ // /_   /  _/___  _____/ /_____ _/ / /__  _____   __/ // /_
 /_  _  __/   / // __ \/ ___/ __/ __ `/ / / _ \/ ___/  /_  _  __/
/_  _  __/  _/ // / / (__  ) /_/ /_/ / / /  __/ /     /_  _  __/
 /_//_/    /___/_/ /_/____/\__/\__,_/_/_/\___/_/       /_//_/

'

# ------------------ Source relevant variables/constants and functions ------------------ #
export SCRIPT_INVOCATION_DIR;SCRIPT_INVOCATION_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

lib_scripts="$SCRIPT_INVOCATION_DIR/src/.lib/export.sh"
configs="$SCRIPT_INVOCATION_DIR/src/.conf/export.sh"
settings="$SCRIPT_INVOCATION_DIR/settings"

# Settings needs to be sourced first because it contains definitions required by settings at config directory.
source "$settings" 
source "$configs"
source "$lib_scripts"
# --------------------------------------------------------------------------------------- #


# ------------------------------------ Setup ------------------------------------ #
clear # Clear the terminal for clearer output.
check_distro "$SUPPORTED_DISTROS" # Check if the current distro is supported.
parse_options "$@" # Parse the comand line options.
pretty_print_installer_msg # Pretty print the installer message.
prompt_install # Promp for proceeding with installation.
check_and_install_utilities "$TEMP_DOTFILES_INSTALL_PATH" "${UTILS_REPOS[@]}" # Install utilities required for installation.
create_log # Create file for logging the installation (if enabled)
check_previous_installation # Check for previous installation
show_install_type # Show the installation type to be performed
install_pacman_packages "$PREREQUISITES" 

# --------------------------------------------------------------------------------------- #


# ------------------------------------ Install ------------------------------------ #
run_tasks() {

   install_yay

   #install_pacman_packages "$PACMAN_PACKAGES"
   install_yay_packages "$YAY_PACKAGES"

   install_pyenv "$TEMP_DOTFILES_INSTALL_PATH/.pyenv"
   install_python_version "$TEMP_DOTFILES_INSTALL_PATH/.pyenv" "$PYTHON_VERSION"
   create_python_venv "$TEMP_DOTFILES_INSTALL_PATH/.pyenv/versions/$PYTHON_VERSION/bin/python" "$TEMP_DOTFILES_INSTALL_PATH/.python-$PYTHON_VERSION-venv"
   install_packages_in_venv "$PIP_PACKAGES" "$TEMP_DOTFILES_INSTALL_PATH/.python-$PYTHON_VERSION-venv"

   install_nvm "$TEMP_DOTFILES_INSTALL_PATH/.nvm"
   install_node_version "$TEMP_DOTFILES_INSTALL_PATH/.nvm" "$NODEJS_VERSION" 
   install_oh_my_zsh "$TEMP_DOTFILES_INSTALL_PATH/.oh-my-zsh"

   create_dirs "$HOME/.cache" "$WALLPAPERS_DIRECTORY"
   get_env_vars "$settings" "$INSTALLATION_SETTINGS" "$INSTALLATION_DEFAULTS" "$INSTALLATION_ENVIRONMENT_VARIABLES" "$INSTALLATION_FILESYSTEM_MAPPING" "$TEMP_DOTFILES_INSTALL_PATH/environment_variables.sh" 
   create_cookiecutter_project -e "$TEMP_DOTFILES_INSTALL_PATH/environment_variables.sh" -t "$COOKIECUTTER_DOTFILES_VENV_TEMPLATE_DIR" -i "$TEMP_INSTALL_PATH" || exit $?
    
}

if [ "$ENABLE_DEBUG" = true ]; then
   gum spin --spinner dot --title "Installing all packages and tools..." -- sleep 1 && run_tasks
else
   gum spin --spinner dot --title "Installing all packages and tools..." -- bash -c "$(declare -f); run_tasks"
fi

# --------------------------------------------------------------------------------------- #


$print_debug "Installation finished!!!" -t "info"
if [ "$ENABLE_LOG" == "true" ] && [ "$ENABLE_DEBUG" == "true" ]; then
   print "Installation log generated at '$LOG'."
fi
exit 0
