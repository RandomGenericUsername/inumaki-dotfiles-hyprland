#!/bin/bash

: '
     __ __     ____           __        ____               __ __
  __/ // /_   /  _/___  _____/ /_____ _/ / /__  _____   __/ // /_
 /_  _  __/   / // __ \/ ___/ __/ __ `/ / / _ \/ ___/  /_  _  __/
/_  _  __/  _/ // / / (__  ) /_/ /_/ / / /  __/ /     /_  _  __/
 /_//_/    /___/_/ /_/____/\__/\__,_/_/_/\___/_/       /_//_/

'

# ------------------ Source relevant variables/constants and functions ------------------ #
export SCRIPT_INVOCATION_DIR;SCRIPT_INVOCATION_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

lib_scripts="$SCRIPT_INVOCATION_DIR/src/.lib/export.sh"
configs="$SCRIPT_INVOCATION_DIR/src/.conf/export.sh"
settings="$SCRIPT_INVOCATION_DIR/settings"

# Settings needs to be sourced first because it contains definitions required by settings at config directory.
source "$settings" 
source "$configs"
source "$lib_scripts"

# Required to update the log path variable in the print debug script
export LOG;
# --------------------------------------------------------------------------------------- #


# ------------------------------------ Setup ------------------------------------ #
clear # Clear the terminal for clearer output.
check_distro "$SUPPORTED_DISTROS" # Check if the current distro is supported.
parse_options "$@" # Parse the comand line options.
pretty_print_installer_msg # Pretty print the installer message.
prompt_install # Promp for proceeding with installation.
echo "INFO: [Installing prerequisites...]" # Print message to inform the user that dependencies are being installed.
check_and_install_utilities "$TEMP_DOTFILES_INSTALL_PATH" "${UTILS_REPOS[@]}" # Install utilities required for installation.
create_log # Create file for logging the installation (if enabled)
check_previous_installation # Check for previous installation
show_install_type # Show the installation type to be performed
#  Need to install prequisites before running the tasks
install_pacman_packages "$PREREQUISITES" 
$print_debug "Prerequisites installed." -t "info"
# --------------------------------------------------------------------------------------- #


# ------------------------------------ Install ------------------------------------ #


run_tasks() {
   $print_debug "Running installation..." -t "info"

   install_yay || exit $?

   install_yay_packages "$YAY_PACKAGES" || exit $?

   install_oh_my_zsh "$TEMP_DOTFILES_INSTALL_PATH/.oh-my-zsh" || exit $?

   install_nvm "$TEMP_DOTFILES_INSTALL_PATH/.nvm" || exit $?
   install_node_version "$TEMP_DOTFILES_INSTALL_PATH/.nvm" "$NODEJS_VERSION" || exit $?

   install_pyenv "$TEMP_DOTFILES_INSTALL_PATH/.pyenv" || exit $?
   install_python_version "$TEMP_DOTFILES_INSTALL_PATH/.pyenv" "$PYTHON_VERSION" || exit $?
   create_python_venv "$TEMP_DOTFILES_INSTALL_PATH/.pyenv/versions/$PYTHON_VERSION/bin/python" "$TEMP_DOTFILES_INSTALL_PATH/.python-$PYTHON_VERSION-venv" || exit $?
   install_packages_in_venv "$PIP_PACKAGES" "$TEMP_DOTFILES_INSTALL_PATH/.python-$PYTHON_VERSION-venv" || exit $?

   create_dirs "$HOME/.cache" "$WALLPAPERS_DIRECTORY" || exit $?

   get_env_vars "$settings" "$INSTALLATION_SETTINGS" "$INSTALLATION_DEFAULTS" "$INSTALLATION_ENVIRONMENT_VARIABLES" "$INSTALLATION_FILESYSTEM_MAPPING" "$VARS" "$TEMP_INSTALL_PATH/environment_variables.sh" || exit $?
   create_cookiecutter_project -e "$TEMP_INSTALL_PATH/environment_variables.sh" -t "$COOKIECUTTER_DOTFILES_VENV_TEMPLATE_DIR" -i "$TEMP_INSTALL_PATH" || exit $?

   $print_debug "Installation finished!!!" -t "info"
   if [ "$ENABLE_LOG" == "true" ] && [ "$ENABLE_DEBUG" == "true" ]; then
      $print_debug "Installation log generated at '$LOG'."
   fi
}


if [ "$ENABLE_DEBUG" = true ]; then
   gum spin --spinner dot --title "Installing all packages and tools..." -- sleep 1 && run_tasks
else
   if ! gum spin --spinner dot --title "Installing all packages and tools..." -- bash -c "$(declare -f); run_tasks";then printf "%b" "${ERROR_COLOR}" 
      echo "!!! An error occurred during installation. Try running again the installation in debug mode with the '-d' or '--debug' options. !!!"
      printf "%b" "${NO_COLOR}" 
      exit 1
   fi
fi

$print_debug "You can now use dotfiles" -t "success"
# --------------------------------------------------------------------------------------- #


